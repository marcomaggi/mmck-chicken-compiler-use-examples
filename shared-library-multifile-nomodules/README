-*- coding: utf-8-unix -*-

		 Shared library, multi file, no modules
		 ======================================


This example  builds a  single shared  library and  a test  program that
dynamically  links to  it.  The  library's  source code  is composed  by
compilation  units  with  the following  dependency,  directed  acyclic,
graph:

                             --------------
                 ---------->| (unit alpha) |<----------
           uses |            --------------            | uses
                |                                      |
          -------------                         --------------
         | (unit beta) |                       | (unit delta) |
          -------------                         --------------
                ^                                      ^
           uses |                                      | uses
                |               -------                |
                 --------------| gamma |---------------
                                -------

each  compilation  unit is  in  a  single  source  file.  The  order  of
evaluation  of each  unit's invoke  code  is established  by the  unit's
dependency graph.  Notice that unit "gamma" is the main one, so:

* It does not declare itself as UNIT, it just declares its USES.

* Its invoke code is the last evaluated one.

  The test  program is composed  of the single compilation  unit "main",
which resides  in a  single source  file; being the  only one:  the unit
"main" does not declare itself as UNIT and does not declare any USES.

  Since  the  shared  library  defines  no  modules:  the  test  program
dynamically  links itself  with the  shared library  (internally through
dlopen) with the form:

   (require-library shared-library)

rather than using REQUIRE-EXTENSION or IMPORT.


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# paragraph-start: "*"
# ispell-local-dictionary: "en_GB-ise-w_accents"
# End:
