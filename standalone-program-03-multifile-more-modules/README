-*- coding: utf-8-unix -*-

	   Standalone program, multi file, with more modules
	   =================================================


This  example  builds  a   single  standalone  program,  without  shared
libraries.  The  source code is  composed by compilation units  with the
following dependency, directed acyclic, graph:

                             --------------
                 ---------->| (unit alpha) |<----------
           uses |            --------------            | uses
                |                                      |
          -------------                         --------------
         | (unit beta) |                       | (unit delta) |
          -------------                         --------------
                ^                                      ^
           uses |                                      | uses
                |            --------------            |
                 -----------| (unit gamma) |-----------
                             --------------
                                    ^
                                    | uses
                                    |
                                 ------
                                | main |
                                 ------

each  compilation  unit is  in  a  single  source  file.  The  order  of
evaluation  of each  unit's invoke  code  is established  by the  unit's
dependency  graph.  Notice  that  unit "main"  is the  main  one in  the
standalone program, so:

* It does not declare itself as UNIT, it just declares its USES.

* Its invoke code is the last evaluated one.

  Each compilation unit  has its code in one or  more modules; when more
modules are in the  same file: the file has the same name  of one of the
modules.  Every module, but "main",  requires the emission of a module's
import library; if  module B imports module A:  the compiler dynamically
links itself  (through dlopen) with  the import  library of module  A to
compile module B.

  The dependency  graph between  modules is similar  to the  one between
compilation units.

                         ------------------
             ---------->| (module (alpha)) |<--------------
    imports |            ------------------                | imports
            |                                              |
    -----------------                             ------------------
   | (module (beta)) |--                       --| (module (delta)) |
    -----------------   |                     |   ------------------
            ^           | imports     imports |            ^
    imports |           v                     v            | imports
            |   ------------------   -------------------   |
            |  | (module (beta1)) | | (module (delta1)) |  |
            |   ------------------   -------------------   |
            |               ^            ^                 |
            |               |            |                 |
            |       imports |            | imports         |
            |               |            |                 |
            |            ------------------                |
             -----------| (module (gamma)) |---------------
                         ------------------
                                  ^
                                  | imports
                                  |
                         -----------------
                        | (module (main)) |
                         -----------------

  The module "main" is never imported, so:

* It does not require the emission of an import library.

* It exports  no syntactic  bindings, relying on  the evaluation  of its
  invoke code to start the program.


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# paragraph-start: "*"
# ispell-local-dictionary: "en_GB-ise-w_accents"
# End:
